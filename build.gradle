buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
        gradleDockerVersion = '1.2'
        gradleWrapperVersion = '3.5'
        workshopVersion = '1.0.1'
        junitParamsVersion = '1.1.0'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:$gradleDockerVersion")
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3")
    }
}

configure(allprojects) {

    apply plugin: 'java'

    group = 'es.malvarez.microservices.workshop'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
           url  "http://dl.bintray.com/malvarez/microservices-workshop-maven" 
        }
    }

}

configure(project(":ubiquitous-language")) {
    dependencies {
        compile("es.malvarez.microservices.workshop:cqrs:$workshopVersion")
    }
}

configure([project(":collision-detector"), project(":particle-detector"), project(":collision-read-model")]) {

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'docker'
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile(project(":ubiquitous-language"))
        compile('org.springframework.cloud:spring-cloud-stream')
        compile("es.malvarez.microservices.workshop:api:$workshopVersion")
        compile("es.malvarez.microservices.workshop:cqrs:$workshopVersion")

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile("pl.pragmatists:JUnitParams:$junitParamsVersion")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE"
            mavenBom 'org.springframework.cloud:spring-cloud-stream-dependencies:Chelsea.SR1'
        }
    }
}

configure([project(":collision-detector"), project(":particle-detector")]) {

    springBoot {
        mainClass = "es.malvarez.microservices.wm.WriteModelApplication"
    }

    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')
    }

    task buildDocker(type: Docker) {
        tag = "manvel7650/microservices-workshop-${project.name}"
        tagVersion = 'latest'
        dockerfile = file("${projectDir}/src/main/docker/Dockerfile")
        doFirst {
            copy {
                from jar
                into stageDir
                rename(jar.archivePath.name, 'app.jar')
            }
        }
    }
    buildDocker.group = 'build'
    build.finalizedBy buildDocker
}

configure(project(":collision-read-model")) {

    dependencies {
        compile("es.malvarez.microservices.workshop:web:$workshopVersion")
        compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')
        compile('org.springframework.cloud:spring-cloud-starter-eureka')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('com.h2database:h2')
        compile('org.liquibase:liquibase-core')
    }

    springBoot {
        mainClass = "es.malvarez.microservices.collision.CollisionReadModelApplication"
    }

    task buildDocker(type: Docker) {
        tag = "manvel7650/microservices-workshop-collision-read-model"
        tagVersion = 'latest'
        dockerfile = file("${projectDir}/src/main/docker/Dockerfile")
        doFirst {
            copy {
                from jar
                into stageDir
                rename(jar.archivePath.name, 'app.jar')
            }
        }
    }
    buildDocker.group = 'build'
    build.finalizedBy buildDocker
}

configure([project(":registry"), project(":gateway")]) {

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'docker'
    apply plugin: 'org.springframework.boot'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE"
        }
    }


}

configure(project(":registry")) {

    springBoot {
        mainClass = "es.malvarez.microservices.registry.RegistryApplication"
    }

    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-eureka-server')
    }

    task buildDocker(type: Docker) {
        tag = "manvel7650/microservices-workshop-registry"
        tagVersion = 'latest'
        dockerfile = file("${projectDir}/src/main/docker/Dockerfile")
        doFirst {
            copy {
                from jar
                into stageDir
                rename(jar.archivePath.name, 'app.jar')
            }
        }
    }
    buildDocker.group = 'build'
    build.finalizedBy buildDocker
}

configure(project(":gateway")) {

    springBoot {
        mainClass = "es.malvarez.microservices.gateway.GatewayApplication"
    }

    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-eureka')
        compile('org.springframework.cloud:spring-cloud-starter-zuul')
    }

    task buildDocker(type: Docker) {
        tag = "manvel7650/microservices-workshop-gateway"
        tagVersion = 'latest'
        dockerfile = file("${projectDir}/src/main/docker/Dockerfile")
        doFirst {
            copy {
                from jar
                into stageDir
                rename(jar.archivePath.name, 'app.jar')
            }
        }
    }
    buildDocker.group = 'build'
    build.finalizedBy buildDocker
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

